"use strict";(self.webpackChunkinterep_docs=self.webpackChunkinterep_docs||[]).push([[849],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),l=c(n),u=a,h=l["".concat(s,".").concat(u)]||l[u]||d[u]||i;return n?r.createElement(h,o(o({ref:t},m),{},{components:n})):r.createElement(h,o({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=l;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},5857:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return l}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],p={sidebar_position:2,title:"Onchain groups"},s="Using onchain groups",c={unversionedId:"guides/onchain-groups",id:"guides/onchain-groups",isDocsHomePage:!1,title:"Onchain groups",description:"In this section, we will learn how to use the Interep onchain groups.",source:"@site/docs/guides/onchain-groups.md",sourceDirName:"guides",slug:"/guides/onchain-groups",permalink:"/guides/onchain-groups",editUrl:"https://github.com/interep/docs/edit/main/docs/guides/onchain-groups.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Onchain groups"},sidebar:"tutorialSidebar",previous:{title:"Offchain groups",permalink:"/guides/offchain-groups"},next:{title:"Semaphore proofs",permalink:"/guides/creating-proofs"}},m=[{value:"Group creation",id:"group-creation",children:[]},{value:"Semaphore identity",id:"semaphore-identity",children:[]},{value:"New members",id:"new-members",children:[]}],d={toc:m};function l(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"using-onchain-groups"},"Using onchain groups"),(0,i.kt)("p",null,"In this section, we will learn how to use the Interep onchain groups."),(0,i.kt)("p",null,"Interep allows develepers to manage their own onchain groups. Anyone can create their own group using the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/interep-project/contracts"},"Interep contracts")," and assigning the role of group admin to an address, which can be a simple wallet or a multisig wallet (e.g. a DAO). The admin can then add or remove members, who can in turn create Semaphore proofs."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Before going any further, if you are not familiar with Semaphore, read the ",(0,i.kt)("a",{parentName:"p",href:"https://semaphore.appliedzkp.org"},"official documentation"),"."))),(0,i.kt)("h2",{id:"group-creation"},"Group creation"),(0,i.kt)("p",null,"Anyone can create an onchain group by interacting with the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/interep-project/contracts"},"Interep contracts"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Set up your contract instance:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import Interep from "./Interep.json" // Contract interface.\nimport { utils, Contract, providers, Wallet } from "ethers"\n\nconst provider = new providers.JsonRpcProvider("https://kovan.infura.io/v3/<infura-api-key>")\nconst adminWallet = Wallet.fromMnemonic("<admin-mnemonic>").connect(provider)\nconst contract = new Contract("<interep-contract-address>", Interep.abi, adminWallet)\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Check the available Interep ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/interep-project/contracts#deployed-contracts"},"contract addresses")," and generate the Interep contract interface (ABI) running ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn compile")," in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/interep-project/contracts"},"repository"),"."))),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Call the ",(0,i.kt)("inlineCode",{parentName:"li"},"createGroup")," contract function:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { utils } from "ethers"\n\nconst groupId = utils.formatBytes32String("<app-name>")\nconst treeDepth = 20\nconst adminAddress = await adminWallet.getAddress()\n\nawait contract.createGroup(groupId, treeDepth, adminAddress)\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"These steps will soon be integrated into the Interep web app."))),(0,i.kt)("h2",{id:"semaphore-identity"},"Semaphore identity"),(0,i.kt)("p",null,"In order for a user to join a group they must create their own Semaphore identity with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/interep-project/interep.js/tree/main/packages/identity"},(0,i.kt)("inlineCode",{parentName:"a"},"@interep/identity")),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Get the Ethereum account signer from Metamask:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import detectEthereumProvider from "@metamask/detect-provider"\nimport { ethers } from "ethers"\n\nconst ethereumProvider = await detectEthereumProvider()\nconst provider = new ethers.providers.Web3Provider(ethereumProvider)\nconst signer = provider.getSigner()\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Create the Semaphore identity and the identity commitment:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import createIdentity from "@interep/identity"\n\nconst sign = (message) => signer.signMessage(message)\n\n// The second parameter can be an offchain provider or an onchain group id.\nconst identity = await createIdentity(sign, "<provider-or-group-id>")\nconst identityCommitment = identity.genIdentityCommitment().toString()\n')),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"While the identity commitment can be public, the Semaphore identity must remain private, as it contains the parameters necessary to create Semaphore proofs."))),(0,i.kt)("h2",{id:"new-members"},"New members"),(0,i.kt)("p",null,"The identity commitment can now be sent to a server, where the group admin can call the ",(0,i.kt)("inlineCode",{parentName:"p"},"addMember")," contract function to add a new member."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"await contract.addMember(groupId, identityCommitment)\n")))}l.isMDXComponent=!0}}]);