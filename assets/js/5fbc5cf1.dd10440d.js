"use strict";(self.webpackChunkinterep_docs=self.webpackChunkinterep_docs||[]).push([[207],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(n),c=r,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7480:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],p={sidebar_position:5},s="API",l={unversionedId:"api",id:"api",isDocsHomePage:!1,title:"API",description:"Interep provides HTTP endpoints to interact with the reputation service and HTTP/WS endpoints to access onchain data with a subgraph.",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/api",editUrl:"https://github.com/interep/docs/edit/main/docs/api.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Semaphore proofs",permalink:"/guides/creating-proofs"},next:{title:"Code of conduct",permalink:"/code-of-conduct"}},u=[{value:"Reputation service",id:"reputation-service",children:[{value:"Providers",id:"providers",children:[]},{value:"Groups",id:"groups",children:[]},{value:"Batches",id:"batches",children:[]}]},{value:"Subgraph",id:"subgraph",children:[{value:"Endpoints",id:"endpoints",children:[]},{value:"Schema",id:"schema",children:[]},{value:"Entities",id:"entities",children:[]},{value:"Example Queries",id:"example-queries",children:[]}]}],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"api"},"API"),(0,i.kt)("p",null,"Interep provides HTTP endpoints to interact with the reputation service and HTTP/WS endpoints to access onchain data with a subgraph."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you want to use the Interep APIs with a JavaScript library you can also use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Interep-project/interep.js/tree/main/packages/api"},(0,i.kt)("inlineCode",{parentName:"a"},"@interep/api")),"."))),(0,i.kt)("h2",{id:"reputation-service"},"Reputation service"),(0,i.kt)("p",null,"Interep servers manage offchain groups and provide APIs to get data about supported groups and associated Merkle trees. "),(0,i.kt)("h3",{id:"providers"},"Providers"),(0,i.kt)("p",null,"Providers are the services that allow Interep to get identities that meet certain criteria (e.g. group membership, social reputation, or ownership of tokens or emails)."),(0,i.kt)("h4",{id:"apiv1providers"},(0,i.kt)("inlineCode",{parentName:"h4"},"/api/v1/providers")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET")," - Returns all the Interep supported providers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"curl https://kovan.interep.link/api/v1/providers\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{ "data": ["twitter", "github", "reddit", "poap", "email", "telegram"] }\n')),(0,i.kt)("h4",{id:"apiv1providersprovidermember"},(0,i.kt)("inlineCode",{parentName:"h4"},"/api/v1/providers/:provider/:member")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET")," - Returns true if an identity commitment belongs to any provider group."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"curl https://kovan.interep.link/api/v1/providers/github/5389624958916554855745402699919973897274778066321592214684792070525465486554\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{ "data": true }\n')),(0,i.kt)("h3",{id:"groups"},"Groups"),(0,i.kt)("p",null,"Groups contain the identity commitments of users who decide to join them (i.e members). Each group has a size (i.e. the number of active members) and the root hash of the group tree. You can add or remove members and get specific data for each group."),(0,i.kt)("h4",{id:"apiv1groups"},(0,i.kt)("inlineCode",{parentName:"h4"},"/api/v1/groups")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET")," - Returns all the Interep groups."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"curl https://kovan.interep.link/api/v1/groups\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{\n    "data": [\n        {\n            "provider": "twitter",\n            "name": "gold",\n            "depth": 20,\n            "root": "19217088683336594659449020493828377907203207941212636669271704950158751593251",\n            "numberOfLeaves": 0,\n            "size": 0\n        },\n        {\n            "provider": "poap",\n            "name": "devcon5",\n            "depth": 20,\n            "root": "19217088683336594659449020493828377907203207941212636669271704950158751593251",\n            "numberOfLeaves": 0,\n            "size": 0\n        },\n        {\n            "provider": "telegram",\n            "name": "-1001396261340",\n            "depth": 20,\n            "root": "19217088683336594659449020493828377907203207941212636669271704950158751593251",\n            "numberOfLeaves": 0,\n            "size": 0\n        },\n        {\n            "provider": "email",\n            "name": "hotmail",\n            "depth": 20,\n            "root": "19217088683336594659449020493828377907203207941212636669271704950158751593251",\n            "numberOfLeaves": 0,\n            "size": 0\n        },\n        ...\n    ]\n}\n')),(0,i.kt)("h4",{id:"apiv1groupsprovidername"},(0,i.kt)("inlineCode",{parentName:"h4"},"/api/v1/groups/:provider/:name")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET")," - Returns a specific Interep group."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"curl https://kovan.interep.link/api/v1/groups/github/gold\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{\n    "data": {\n        "provider": "github",\n        "name": "gold",\n        "depth": 20,\n        "root": "3539596833905557328479676245499052267688962849195984401151716846778908697643",\n        "numberOfLeaves": 1,\n        "size": 1\n    }\n}\n')),(0,i.kt)("h4",{id:"apiv1groupsprovidernamememberstruelimit0offset0"},(0,i.kt)("inlineCode",{parentName:"h4"},"/api/v1/groups/:provider/:name?members=true&limit=0&offset=0")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET")," - Returns a specific Interep group with its members."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"curl https://kovan.interep.link/api/v1/groups/github/gold?members=true&limit=0&offset=0\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{\n    "data": {\n        "provider": "github",\n        "name": "gold",\n        "depth": 20,\n        "root": "11783102006236284948621664772636974806012062508040430280186082981899335591789",\n        "numberOfLeaves": 2,\n        "size": 2,\n        "members": [\n            "6014393454173820032764441533619576647480292883965697181546606218195926726207",\n            "21605618534090961454558107749130073320045509650908077266704421832011347336358"\n        ]\n    }\n}\n')),(0,i.kt)("h4",{id:"apiv1groupsprovidernamemember"},(0,i.kt)("inlineCode",{parentName:"h4"},"/api/v1/groups/:provider/:name/:member")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET")," - Returns true if an identity commitment belongs to a group."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"curl https://kovan.interep.link/api/v1/groups/github/gold/5389624958916554855745402699919973897274778066321592214684792070525465486554\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{ "data": true }\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"POST")," - Adds a member to a group and return true (for OAuth groups only). Your domain must be whitelisted to use this API."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},'curl -X POST -H "Authorization: token OAUTH-TOKEN" \\\nhttps://kovan.interep.link/api/v1/groups/github/gold/5389624958916554855745402699919973897274778066321592214684792070525465486554\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{ "data": true }\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"DELETE")," - Removes a member from a group and return true (for OAuth groups only). Your domain must be whitelisted to use this API."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},'curl -X DELETE -H "Authorization: token OAUTH-TOKEN" \\\nhttps://kovan.interep.link/api/v1/groups/github/gold/5389624958916554855745402699919973897274778066321592214684792070525465486554\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{ "data": true }\n')),(0,i.kt)("h4",{id:"apiv1groupsprovidernamememberproof"},(0,i.kt)("inlineCode",{parentName:"h4"},"/api/v1/groups/:provider/:name/:member/proof")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET")," - Returns a Merkle tree proof."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"curl https://kovan.interep.link/api/v1/groups/github/gold/6014393454173820032764441533619576647480292883965697181546606218195926726207/proof\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{\n    "data": {\n        "leaf": "6014393454173820032764441533619576647480292883965697181546606218195926726207",\n        "root": "3689873171999483269047322566015997033293730148774246308387372366523680155983",\n        "siblings": [\n            "0",\n            "14744269619966411208579211824598458697587494354926760081771325075741142829156",\n            "7423237065226347324353380772367382631490014989348495481811164164159255474657",\n            "11286972368698509976183087595462810875513684078608517520839298933882497716792",\n            "3607627140608796879659380071776844901612302623152076817094415224584923813162",\n            "19712377064642672829441595136074946683621277828620209496774504837737984048981",\n            "20775607673010627194014556968476266066927294572720319469184847051418138353016",\n            "3396914609616007258851405644437304192397291162432396347162513310381425243293",\n            "21551820661461729022865262380882070649935529853313286572328683688269863701601",\n            "6573136701248752079028194407151022595060682063033565181951145966236778420039",\n            "12413880268183407374852357075976609371175688755676981206018884971008854919922",\n            "14271763308400718165336499097156975241954733520325982997864342600795471836726",\n            "20066985985293572387227381049700832219069292839614107140851619262827735677018",\n            "9394776414966240069580838672673694685292165040808226440647796406499139370960",\n            "11331146992410411304059858900317123658895005918277453009197229807340014528524",\n            "15819538789928229930262697811477882737253464456578333862691129291651619515538",\n            "19217088683336594659449020493828377907203207941212636669271704950158751593251",\n            "21035245323335827719745544373081896983162834604456827698288649288827293579666",\n            "6939770416153240137322503476966641397417391950902474480970945462551409848591",\n            "10941962436777715901943463195175331263348098796018438960955633645115732864202"\n        ],\n        "pathIndices": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    }\n}\n')),(0,i.kt)("h3",{id:"batches"},"Batches"),(0,i.kt)("p",null,"Merkle trees are used as a data structure for groups. Each group has a tree, which is created when the first member is added. Members, or identity commitments, are therefore the leaves of the Merkle trees and to ensure the integrity of these offchain trees, their root hashes are saved at regular intervals. The batches contain the intermediate roots."),(0,i.kt)("h4",{id:"apiv1batches"},(0,i.kt)("inlineCode",{parentName:"h4"},"/api/v1/batches")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET")," - Returns all the root batches."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"curl https://kovan.interep.link/api/v1/batches\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{\n    "data": [\n        {\n            "group": { "provider": "github", "name": "gold" },\n            "roots": ["14273848199791178467311820318933280591305571798471599149384455313172966875782"],\n            "transaction": {\n                "hash": "0x1dec16b1c76a0a1fc9b4c7c898ae0ba72f496868fb7d2fe447fefe5eeaf676c1",\n                "blockNumber": 10\n            }\n        },\n        {\n            "group": { "provider": "github", "name": "gold" },\n            "roots": [\n                "19217088683336594659449020493828377907203207941212636669271704950158751593251",\n                "3539596833905557328479676245499052267688962849195984401151716846778908697643"\n            ],\n            "transaction": {\n                "hash": "0xd1890bb9bda0adc650aefe974ccfe26665fe471c8a9f5306591bcc0c71088ced",\n                "blockNumber": 11\n            }\n        }\n    ]\n}\n')),(0,i.kt)("h4",{id:"apiv1batchesroot"},(0,i.kt)("inlineCode",{parentName:"h4"},"/api/v1/batches/:root")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"GET")," - Returns the batch to which a root hash belongs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Shell"',title:'"Shell"'},"curl https://kovan.interep.link/api/v1/batches/3539596833905557328479676245499052267688962849195984401151716846778908697643\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="Response"',title:'"Response"'},'{\n    "data": {\n        "group": { "provider": "github", "name": "gold" },\n        "roots": [\n            "19217088683336594659449020493828377907203207941212636669271704950158751593251",\n            "3539596833905557328479676245499052267688962849195984401151716846778908697643"\n        ],\n        "transaction": {\n            "hash": "0xd1890bb9bda0adc650aefe974ccfe26665fe471c8a9f5306591bcc0c71088ced",\n            "blockNumber": 11\n        }\n    }\n}\n')),(0,i.kt)("h2",{id:"subgraph"},"Subgraph"),(0,i.kt)("p",null,"The Graph is an indexing protocol for querying networks like Ethereum and IPFS. Anyone can build and publish open APIs, called subgraphs, making data easily accessible. You can use various GraphQL ",(0,i.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/developer/querying-from-your-app"},"client libraries")," to query the subgraph and populate your app with the data indexed by the subgraph."),(0,i.kt)("p",null,"Our ",(0,i.kt)("a",{parentName:"p",href:"https://thegraph.com/hosted-service/subgraph/interep-project/interep-groups-kovan"},"Interep subgraph")," allow you to get data from the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/interep-group/contracts"},"Interep smart contract"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you don't know GraphQL, you can try running some queries using the Graph Explorer and its ",(0,i.kt)("a",{parentName:"p",href:"https://thegraph.com/hosted-service/subgraph/interep-project/interep-groups-kovan?selected=playground"},"GraphQL playground"),". You can find some examples ",(0,i.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/developer/graphql-api"},"here"),"."))),(0,i.kt)("h3",{id:"endpoints"},"Endpoints"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Queries")," (HTTP): ",(0,i.kt)("a",{parentName:"li",href:"https://api.thegraph.com/subgraphs/name/interep-project/interep-groups-kovan"},"https://api.thegraph.com/subgraphs/name/interep-project/interep-groups-kovan")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Subscriptions")," (WS): wss://api.thegraph.com/subgraphs/name/interep-project/interep-groups-kovan")),(0,i.kt)("h3",{id:"schema"},"Schema"),(0,i.kt)("h3",{id:"entities"},"Entities"),(0,i.kt)("h5",{id:"onchaingroup"},"OnchainGroup"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": unique identifier among all onchain group entities,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"depth"),": depth of the Merkle tree used for the group,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"root"),": last root hash of the Merkle tree,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"size"),": number of active members (or non-zero tree leaves),"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"numberOfLeaves"),": total number of tree leaves,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"admin"),": admin of the group,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"members"),": list of members of the group.")),(0,i.kt)("h5",{id:"member"},"Member"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": unique identifier among all member entities,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"identityCommitment"),": Semaphore identity commitment,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index"),": index of the tree leaf,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group"),": link to the onchain group entity.")),(0,i.kt)("h5",{id:"offchaingroup"},"OffchainGroup"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": unique identifier among all offchain group entities,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"depth"),": depth of the merkle tree used for the group,"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"root"),": root hash of the tree used for the group,")),(0,i.kt)("h3",{id:"example-queries"},"Example Queries"),(0,i.kt)("h4",{id:"all-members-for-the-first-10-onchain-groups"},"All members for the first 10 onchain groups"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n    onchainGroups(first: 10) {\n        id\n        depth\n        admin\n        members {\n            identityCommitment\n            index\n        }\n    }\n}\n")),(0,i.kt)("h4",{id:"sample-of-onchain-members"},"Sample of onchain members"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n    members(first: 5) {\n        identityCommitment\n        root\n        index\n        group {\n            id\n        }\n    }\n}\n")),(0,i.kt)("h4",{id:"onchain-groups-by-identity-commitment"},"Onchain groups by identity commitment"),(0,i.kt)("p",null,"It can be useful when you want all groups of a certain provider to which a user belongs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n    members(\n        where: { identityCommitment: "2066509069781532083082870363092240900543210735798842041673598797369005529920" }\n    ) {\n        onchainGroups {\n            id\n            depth\n            size\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);